<<<<<<< Updated upstream
[["lectura-de-datos-ordenados.html", "Capítulo 4 Lectura de datos ordenados ", " Capítulo 4 Lectura de datos ordenados "],["descargando-datos.html", "4.1 Descargando datos", " 4.1 Descargando datos Antes de poder leer cualquier dato en R, primero hay que encontrarlo y descargarlo. El Ministerio de Turismo mantiene un portal de datos abierto llamado Yvera donde podés buscar y descargar datos relacionados con el turismo en Argentina. En esta sección vamos a descargar una serie de tiempo a partir de la Encuesta de Viajes y Turismo de los Hogares (EVyTH). Primero, ingresá a http://datos.yvera.gob.ar/, donde te vas a encontrar con la páigna principal de Yvera. La base de datos que vamos a descargar está en el área de Turismo Interno así que hacé click en ese ícono para navegar a la sección de datasets correspondiente. Al momento que escribimos esta guía el primer set de datos que aparece es la Encuesta de Viajes y Turismo de los Hogares (EVyTH). Hacé click ahí para ir a la página de este set de datos. Este set de datos tiene distintos recursos. Varios son datos, como “Turistas residentes por región de destino del viaje” o “Turistas residentes por edad”, pero también hay un recurso llamado “Ficha Técnica: EVyTH”. Este es un PDF con la descripción de los datos así como consideraciones metodológicas relevantes. Es importante que si vas a usar datos siempre mires la ficha técnica para hacerte una idea de las limitaciones metodológicas que pueden tener estos datos. Por ahora vamos a descargar la serie de Turistas residentes por edad. En esta pantalla te vas a encontrar con una descripción del set de datos y sus variables. Para descargar los datos hay que hacer click en el botón que dice “DESCARGAR”. Guardalo en una carpeta dentro del proyecto (recomedamos organizar los datos en una carpeta llamada “datos”) y ya está listo para leer. Pero si tuvieras que realizar un informe mensual sobre estos datos tendrías que hacer toda esta descarga manual cada vez que se actualiza el informe. La gracia de usar código es automatizar todo lo más posible, así que en vez de descargar manualmente el archivo, se puede descargar automáticamente desde el código de R. Para eso, primero necesitás la dirección (URL) del set de datos. Eso se consigue yendo a la página del set de datos y en vez de hacer click en DESCAGAR, haciendo Click derecho → Copiar dirección del enlace La URL de la esta serie es http://datos.yvera.gob.ar/dataset/945e10f1-eee7-48a2-b0ef-8aff11df8814/resource/abdacfcd-4a6c-4283-9abb-c1352def52e1/download/tur_int_turistas_residentes_edad_serie.csv. Guaramos eso en una variable en R turistas_edad_url &lt;- &quot;http://datos.yvera.gob.ar/dataset/945e10f1-eee7-48a2-b0ef-8aff11df8814/resource/abdacfcd-4a6c-4283-9abb-c1352def52e1/download/tur_int_turistas_residentes_edad_serie.csv&quot; Y también definimos la ruta donde descargar el archivo turistas_edad_archivo &lt;- &quot;datos/turistas_edad.csv&quot; Y finalmente usamos la función download.file() para descargar el archivo. download.file(url = turistas_edad_url, destfile = turistas_edad_archivo) Y esto va a descargar la última versión de los datos. "],["leer-datos-csv.html", "4.2 Leer datos csv", " 4.2 Leer datos csv Existen muchas funciones distintas para leer datos dependiendo del formato en el que están guardados. Para datos tabulares, la forma más útil es el formato csv, que es un archivo de texto plano con datos separados por coma. Para importar datos hace falta escribir el código correspondiente pero también podés aprovechar el entorno gráfico de RStudio: File → Import Dataset → From Text (readr)… Esto te va abrir una ventana donde podrás elegir el archivo a importar (en este caso el archivo turistas_edad.csv que está dentro de la capeta datos del proyecto) y otros detalles. knitr::include_graphics(&quot;img/importar-edad-xlsx.png&quot;) En la pantalla principal vas a poder previsualizar los datos y ver que pinta tienen. Abajo a la izquierda tenés varias opciones: el nombre que vas a usar para la variable (en este caso llamaremos turistas_edad), si la primera fila contiene los nombres de las columnas (First Row as Names), qué delimitador tienen los datos (en este caso comma, pero podría ser punto y coma u otro), etc… Y abajo a la derecha es el código que vas a necesitar para efectivamente importar los datos. Podrías apretar el botón “Import” para leer los datos pero si bien es posible, al mismo tiempo esas líneas de código no se guardan en ningún lado y entonces nuestro trabajo luego no se puede reproducir. Por eso, te proponemos que copies ese código, cierres esa ventana con el botón “Cancel”, y pegues el código en el archivo donde estés trabajando. Cuando lo ejecutes, se va a generar la variable turistas_edad con los datos. library(readr) turistas_edad &lt;- read_csv(&quot;datos/turistas_edad.csv&quot;) ## Rows: 180 Columns: 3 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: &quot;,&quot; ## chr (2): indice_tiempo, edad ## dbl (1): turistas ## ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. Nota: Notá que en este caso el código para leer los datos consta de dos líneas. La primera carga el paquete readr y el segundo usa la función read_csv() (del paquete readr) para leer el archivo .csv. No es necesario cargar el paquete cada vez que vas a leer un archivo, pero asegurate de incluir esta línea en el primer bloque de código de tu archivo. Nota: La interfaz de usuario de RStudio sirve para autogenerar el código que lee el archivo. Una vez que lo tenés, no necesitás abrirla de nuevo. Todo ese texto naranja/rojo es intimidante pero no te preocupes, es sólo un mensaje que nos informa que los datos se leyeron y qué tipo de dato tiene cada columna. Podemos explorar la estructura de la variable turistas_edad usando la función str() (de structure en inglés). str(turistas_edad) ## spec_tbl_df [180 × 3] (S3: spec_tbl_df/tbl_df/tbl/data.frame) ## $ indice_tiempo: chr [1:180] &quot;2012-01&quot; &quot;2012-01&quot; &quot;2012-01&quot; &quot;2012-01&quot; ... ## $ edad : chr [1:180] &quot;Menores de 14&quot; &quot;14 a 29&quot; &quot;30 a 44&quot; &quot;45 a 59&quot; ... ## $ turistas : num [1:180] 2700561 3143845 3234308 2126707 1268445 ... ## - attr(*, &quot;spec&quot;)= ## .. cols( ## .. indice_tiempo = col_character(), ## .. edad = col_character(), ## .. turistas = col_double() ## .. ) ## - attr(*, &quot;problems&quot;)=&lt;externalptr&gt; Esto nos dice un montón. La primera línea dice que es una tibble, que es un caso especial de la estructura de datos tabular básica de R llamada data.frame. Tiene 180 filas (las observaciones) y 3 columnas (o variables que describen las observaciones). Las siguientes líneas nos dicen los nombres de las columnas (indice_tiempo, edad, y turistas), su tipo de dato (chr o num), la longitud ([1:180]) y sus primeros elementos. "],["leer-datos-de-excel.html", "4.3 Leer datos de excel", " 4.3 Leer datos de excel Si tenés la vista avispada, habrás notado que en el menú de “Import Dataset” hay una opción para leer datos de Excel. En efecto, RStudio provee la misma ayuda para leer este tipo de datos: File → Import Dataset → From Excel… CAMBIAR knitr::include_graphics(&quot;img/importar-edad-xlsx.png&quot;) Notá que entre las opciones de abajo a la izquierda aparecen dos variables importantes. Podés seleccionar de qué hoja leer los datos y qué rango usar. Esto seguro que te va a ser muy útil para esos archivos de Excel con múltiples tablas en un archivo, o incluso múltiples tablas en cada hoja! En este caso turistas_edad.xlsx es un Excel buena onda, y el código para leer los datos es muy simple: library(readxl) turistas_edad &lt;- read_excel(&quot;datos/turistas_edad.xlsx&quot;) Con la función str() podés confirmar que los datos leídos son los mismos que para el csv. str(turistas_edad) ## tibble [180 × 3] (S3: tbl_df/tbl/data.frame) ## $ indice_tiempo: chr [1:180] &quot;2012-01&quot; &quot;2012-01&quot; &quot;2012-01&quot; &quot;2012-01&quot; ... ## $ edad : chr [1:180] &quot;Menores de 14&quot; &quot;14 a 29&quot; &quot;30 a 44&quot; &quot;45 a 59&quot; ... ## $ turistas : num [1:180] 2700561 3143845 3234308 2126707 1268445 ... Desafío: Lee un archivo Lee el archivo turistas_edad.xlsx, pero solo las primeras 30 lineas ¿Qué cambió en código que devuelve RStudio? Revisa la documentación de la función read_excel() para identificar otros argumentos que puedan resultarte útiles. "]]
=======
[["trabajar-con-proyectos-en-rstudio.html", "Capítulo 2 Trabajar con proyectos en RStudio", " Capítulo 2 Trabajar con proyectos en RStudio Trabajar con proyectos de RStudio no solo hace tus análisis más ordenados y reproducibles, también hacen tu vida más simple. Al comienzo posiblemente tengas un script y uno o dos archivos con datos, pero es posible que rápidamente te encuentres con una docena de archivos con nombres parecidos pero que pertenecen a análisis totalmente distintos. Antes de que la cosa comience a complicarse te proponemos trabajar con proyectos. 2.0.1 ¿Qué ventajas tiene? Te permite “cuidar” los datos que usas al ordenarnos en carpetas que diferencien entre la versión original o cruda y los datos limpios o los resultados finales. Te permite compartir tu trabajo fácilmente con otras personas. Solo tendrías que compartir la carpeta del proyecto sabiendo que incluye todo lo necesario para que cualquiera reproduzca tu análisis. Te permite publicar de manera ordenada tu código si vas a presentar o publicar tu trabajo. Te permite continuar con lo que estabas haciendo hace una semana o hace un mes como si el tiempo no hubiera pasado. De alguna manera es un regalo para tu yo futuro. Primer desafío: Crea un nuevo proyecto en RStudio Hacé click en el menú “Archivo” (“File”) y luego en “Nuevo Proyecto” (“New Project”). Hacé click en “Nueva Carpeta” (“New Directory”). Hacé click en “Nuevo Proyecto” (“New Project”). Escribí el nombre de la carpeta que alojará a tu proyecto, por ejemplo “mi_proyecto” Si aparece (y sabés usarlo), seleccioná “Crear un repositorio de git” (“Create a git repository”). Hacé click en “Crear Proyecto” (“Create Project”). Si todo salió bien, ahora deberías tener una nueva carpeta que se llama mi_proyecto. Pero si bien es una carpeta común y corriente, le llamamos proyecto porque además contiene un archivo con el mismo nombre mi_proyecto.Rproj (o solo mi_proyecto si en tu computadora no ves la extensión de los archivos). 2.0.2 Abrir un proyecto La manera más simple de abrir un proyecto es abriendo la carpeta que lo contiene y haciendo doble click sobre el archivo mi_proyecto.Rproj. Al hacer esto se abrirá RStudio y la sesión de R en la misma carpeta y, por defecto, cualquier archivo que quieras abrir o guardar lo hará en esa misma ubicación. Esto ayuda a mantener tu trabajo ordenado y que luego sea simple retomar o compartir lo que hiciste. RStudio permite tener varios proyectos abiertos, y esto es posible porque justamente cada proyecto tiene su propia carpeta. Si en algún momento trabajas con proyectos en paralelo vas a poder hacerlo sin que el código o los resultados de un análisis interfieran con otro. Segundo desafío: Abrí tu nuevo proyecto desde el explorador de archivos Cerrá RStudio Desde el explorador de archivos, buscá la carpeta donde creaste tu proyecto. Hacé doble click en el archivo que tiene el nombre de tu proyecto (y que termina con .Rproj) que encontrarás en esa carpeta. 2.0.3 ¿Cómo se organiza? No existe una “mejor” forma de organizar un proyecto pero acá van algunos principios generales que nos hacen la vida más simple:: Tratar los datos como sólo de lectura Es posible que la toma de los datos que querés analizar te haya costado mucho trabajo, o te haya costado conseguirlos. Trabajar con datos de forma interactiva (por ejemplo, en Excel) tiene la ventaja de permitirte hacer algunos análisis rápidamente pero al mismo tiempo tiene la desventaja de que esos datos pueden ser modificados fácilmente. Esto significa que a veces no conozcas de la procedencia de los datos, o no recuerdes como los modificaste desde que los obtuviste. Por lo tanto, es una buena idea tratar los datos como “sólo de lectura” y nunca modificar los archivos originales. Limpieza de datos En muchos casos tus datos estarán “sucios”, necesitarán un preprocesamiento importante para organizarlos en un formato que R (o cualquier otro lenguaje de programación) pueda analizados fácilmente. Esta tarea se denomina a veces “amasado” o “masticado de datos”. Es una buena costumbre guardar el código que te permitió limpiar estos datos por si los volvieras a necesitar. También es recomendable guardar esa versión de los datos limpios, de “sólo lectura”, para que puedas usarlos en tu análisis sin necesidad de repetir cada vez todo el proceso de limpieza de los datos. Tratar las salidas o resultados generados como descartables Cualquier resultado (gráficos, tablas, valores) debe poder repetirse o rehacerse a partir del código guardado. Si bien las pruebas rápidas para ver si el código funciona se pueden hacer en la consola, es importante guardar el código que genera los resultados y asegurarnos de que sean reproducibles. Aún mejor, si organizas esos resultados en distintas sub-carpetas, luego tendrás todo aún más ordenado. 2.0.4 Borrón y cuenta nueva… todos los días! ¿Cómo nos aseguramos de que el análisis sea realmente reproducible? Esta es una pregunta bastante amplia y hay muchas herramientas para resolver este problema. Por ahora nos vamos a concentrar en que al menos en tu computadora puedas repetir los cálculos o el análisis desde cero. Y además de organizar proyectos y no modificar los datos originales, ¿cómo podés asegurarte de que guardaste todo el código que estuviste escribiendo y usaste? La manera más directa es reiniciar la sesión de R y correr el código de nuevo, si da error o no devuelve lo que esperabas significa que te faltó guardar algún paso. Tip: Podés reiniciar la sesión de R con el atajo Ctrl+Shif+F10 Esto puede pasar si por ejemplo leemos una base de datos en memoria pero no guardamos el código que lo hace. Mientras estemos trabajando, R tendrá esa base de datos en memoria y podremos hacer cálculos y gráficos. Por defecto además RStudio va a recordar las variables que estés usando mañana o pasado en un archivo oculto (.RData) a menos que le indiques lo contrario. Y si bien suena práctico volver a R al otro día y tener el análisis tal cual lo dejamos, esto puede significar que nunca nos demos cuenta que nos faltó guardar una línea de código clave en nuestro análisis. Tercer desafío: Configurá RStudio Hacé click en el menú “Herramientas (”Tools”) y luego “Opciones globales” (“Global Options”). Destildá la opción “Recuperar .RData al inicio de la sesión” (“Restore .RData into workspace at startup”). Hacé click en “Aplicar” (“Apply”). "]]
>>>>>>> Stashed changes
